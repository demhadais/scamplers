from scamplepy.query import *
from ..common import *
from uuid import *
# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import scamplepy.common
import typing
import uuid
import scamplepy

class CdnaQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> CdnaQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> CdnaQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> CdnaQuery: ...

class ChromiumRunQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def readable_ids(self) -> builtins.list[builtins.str]: ...
    @property
    def assay(self) -> typing.Optional[TenxAssayQuery]: ...
    @property
    def run_before(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def run_after(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def succeeded(self) -> typing.Optional[builtins.bool]: ...
    @property
    def notes(self) -> builtins.list[builtins.str]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @readable_ids.setter
    def readable_ids(self, value: builtins.list[builtins.str]) -> None: ...
    @assay.setter
    def assay(self, value: typing.Optional[TenxAssayQuery]) -> None: ...
    @run_before.setter
    def run_before(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @run_after.setter
    def run_after(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @succeeded.setter
    def succeeded(self, value: typing.Optional[builtins.bool]) -> None: ...
    @notes.setter
    def notes(self, value: builtins.list[builtins.str]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> ChromiumRunQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> ChromiumRunQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> ChromiumRunQuery: ...

class InstitutionQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def names(self) -> builtins.list[builtins.str]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @names.setter
    def names(self, value: builtins.list[builtins.str]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> InstitutionQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> InstitutionQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> InstitutionQuery: ...

class LabQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def names(self) -> builtins.list[builtins.str]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @names.setter
    def names(self, value: builtins.list[builtins.str]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LabQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LabQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LabQuery: ...

class LibraryQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def library_types(self) -> builtins.list[LibraryType]: ...
    @property
    def pagination(self) -> Pagination: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @library_types.setter
    def library_types(self, value: builtins.list[LibraryType]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibraryQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibraryQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibraryQuery: ...

class OrderBy:
    @property
    def field(self) -> builtins.str: ...
    @property
    def descending(self) -> builtins.bool: ...
    @field.setter
    def field(self, value: builtins.str) -> None: ...
    @descending.setter
    def descending(self, value: builtins.bool) -> None: ...
    def __new__(cls, field:builtins.str, descending:builtins.bool) -> OrderBy: ...

class Pagination:
    @property
    def limit(self) -> builtins.int: ...
    @property
    def offset(self) -> builtins.int: ...
    @limit.setter
    def limit(self, value: builtins.int) -> None: ...
    @offset.setter
    def offset(self, value: builtins.int) -> None: ...

class PersonQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def names(self) -> builtins.list[builtins.str]: ...
    @property
    def emails(self) -> builtins.list[builtins.str]: ...
    @property
    def orcids(self) -> builtins.list[builtins.str]: ...
    @property
    def ms_user_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @names.setter
    def names(self, value: builtins.list[builtins.str]) -> None: ...
    @emails.setter
    def emails(self, value: builtins.list[builtins.str]) -> None: ...
    @orcids.setter
    def orcids(self, value: builtins.list[builtins.str]) -> None: ...
    @ms_user_ids.setter
    def ms_user_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, ids:typing.Sequence[uuid.UUID]=[], names:typing.Sequence[builtins.str]=[], emails:typing.Sequence[builtins.str]=[], orcids:typing.Sequence[builtins.str]=[], ms_user_ids:typing.Sequence[uuid.UUID]=[], order_by:builtins.list[OrderBy]=..., pagination:Pagination=...) -> PersonQuery: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> PersonQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> PersonQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> PersonQuery: ...

class SequencingRunQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SequencingRunQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SequencingRunQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SequencingRunQuery: ...

class SpecimenQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def names(self) -> builtins.list[builtins.str]: ...
    @property
    def submitters(self) -> builtins.list[uuid.UUID]: ...
    @property
    def labs(self) -> builtins.list[uuid.UUID]: ...
    @property
    def received_before(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def received_after(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def species(self) -> builtins.list[Species]: ...
    @property
    def notes(self) -> builtins.list[builtins.str]: ...
    @property
    def types(self) -> builtins.list[SpecimenType]: ...
    @property
    def embedded_in(self) -> builtins.list[FixedBlockEmbeddingMatrix | FrozenBlockEmbeddingMatrix]: ...
    @property
    def fixatives(self) -> builtins.list[BlockFixative | SuspensionFixative | TissueFixative]: ...
    @property
    def storage_buffers(self) -> builtins.list[builtins.str]: ...
    @property
    def frozen(self) -> typing.Optional[builtins.bool]: ...
    @property
    def cryopreserved(self) -> typing.Optional[builtins.bool]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @names.setter
    def names(self, value: builtins.list[builtins.str]) -> None: ...
    @submitters.setter
    def submitters(self, value: builtins.list[uuid.UUID]) -> None: ...
    @labs.setter
    def labs(self, value: builtins.list[uuid.UUID]) -> None: ...
    @received_before.setter
    def received_before(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @received_after.setter
    def received_after(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @species.setter
    def species(self, value: builtins.list[Species]) -> None: ...
    @notes.setter
    def notes(self, value: builtins.list[builtins.str]) -> None: ...
    @types.setter
    def types(self, value: builtins.list[SpecimenType]) -> None: ...
    @embedded_in.setter
    def embedded_in(self, value: builtins.list[FixedBlockEmbeddingMatrix | FrozenBlockEmbeddingMatrix]) -> None: ...
    @fixatives.setter
    def fixatives(self, value: builtins.list[BlockFixative | SuspensionFixative | TissueFixative]) -> None: ...
    @storage_buffers.setter
    def storage_buffers(self, value: builtins.list[builtins.str]) -> None: ...
    @frozen.setter
    def frozen(self, value: typing.Optional[builtins.bool]) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: typing.Optional[builtins.bool]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, ids:typing.Sequence[uuid.UUID]=[], names:typing.Sequence[builtins.str]=[], submitters:typing.Sequence[uuid.UUID]=[], labs:typing.Sequence[uuid.UUID]=[], received_before:typing.Optional[datetime.datetime]=None, received_after:typing.Optional[datetime.datetime]=None, species:typing.Sequence[Species]=[], notes:typing.Sequence[builtins.str]=[], types:typing.Sequence[SpecimenType]=[], embedded_in:typing.Sequence[FixedBlockEmbeddingMatrix | FrozenBlockEmbeddingMatrix]=[], fixatives:typing.Sequence[BlockFixative | SuspensionFixative | TissueFixative]=[], storage_buffers:typing.Sequence[builtins.str]=[], frozen:typing.Optional[builtins.bool]=None, cryopreserved:typing.Optional[builtins.bool]=None, order_by:builtins.list[OrderBy]=..., pagination:Pagination=...) -> SpecimenQuery: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenQuery: ...

class SuspensionPoolQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionPoolQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionPoolQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionPoolQuery: ...

class SuspensionQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, ids:typing.Sequence[uuid.UUID]=[], order_by:builtins.list[OrderBy]=..., pagination:Pagination=...) -> SuspensionQuery: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionQuery: ...

class TenxAssayQuery:
    @property
    def ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def names(self) -> builtins.list[builtins.str]: ...
    @property
    def library_types(self) -> builtins.list[builtins.list[LibraryType]]: ...
    @property
    def sample_multiplexing(self) -> builtins.list[SampleMultiplexing]: ...
    @property
    def chemistry_versions(self) -> builtins.list[builtins.str]: ...
    @property
    def chromium_chips(self) -> builtins.list[builtins.str]: ...
    @property
    def cmdlines(self) -> builtins.list[builtins.str]: ...
    @property
    def order_by(self) -> builtins.list[OrderBy]: ...
    @property
    def pagination(self) -> Pagination: ...
    @ids.setter
    def ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @names.setter
    def names(self, value: builtins.list[builtins.str]) -> None: ...
    @library_types.setter
    def library_types(self, value: builtins.list[builtins.list[LibraryType]]) -> None: ...
    @sample_multiplexing.setter
    def sample_multiplexing(self, value: builtins.list[SampleMultiplexing]) -> None: ...
    @chemistry_versions.setter
    def chemistry_versions(self, value: builtins.list[builtins.str]) -> None: ...
    @chromium_chips.setter
    def chromium_chips(self, value: builtins.list[builtins.str]) -> None: ...
    @cmdlines.setter
    def cmdlines(self, value: builtins.list[builtins.str]) -> None: ...
    @order_by.setter
    def order_by(self, value: builtins.list[OrderBy]) -> None: ...
    @pagination.setter
    def pagination(self, value: Pagination) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> TenxAssayQuery: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> TenxAssayQuery: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> TenxAssayQuery: ...

