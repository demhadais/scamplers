# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing
from enum import Enum

class ElectrophoreticMeasurementData:
    @measured_at.setter
    def measured_at(self, value: datetime.datetime) -> None: ...
    @instrument_name.setter
    def instrument_name(self, value: builtins.str) -> None: ...
    @mean_size_bp.setter
    def mean_size_bp(self, value: typing.Optional[builtins.float]) -> None: ...
    @sizing_range.setter
    def sizing_range(self, value: tuple[builtins.int, builtins.int]) -> None: ...
    @concentration.setter
    def concentration(self, value: NucleicAcidConcentration) -> None: ...
    def __new__(cls, *, measured_at:datetime.datetime, instrument_name:builtins.str, mean_size_bp:typing.Optional[builtins.float], sizing_range:tuple[builtins.int, builtins.int], concentration_value:builtins.float, concentration_unit:tuple[MassUnit, VolumeUnit]) -> ElectrophoreticMeasurementData: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> ElectrophoreticMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> ElectrophoreticMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> ElectrophoreticMeasurementData: ...

class JsonMetricsFile:
    @filename.setter
    def filename(self, value: builtins.str) -> None: ...
    @raw_contents.setter
    def raw_contents(self, value: builtins.str) -> None: ...
    def __new__(cls, *, filename:builtins.str, raw_contents:builtins.str) -> JsonMetricsFile: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> JsonMetricsFile: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> JsonMetricsFile: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> JsonMetricsFile: ...

class LibraryMeasurementData:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibraryMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibraryMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibraryMeasurementData: ...
    class Electrophoretic(LibraryMeasurementData):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> ElectrophoreticMeasurementData: ...
        def __new__(cls, _0:ElectrophoreticMeasurementData) -> LibraryMeasurementData.Electrophoretic: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Fluorometric(LibraryMeasurementData):
        __match_args__ = ("measured_at", "instrument_name", "concentration",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def concentration(self) -> NucleicAcidConcentration: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, concentration:NucleicAcidConcentration) -> LibraryMeasurementData.Fluorometric: ...
    

class MultiRowCsvMetricsFile:
    @filename.setter
    def filename(self, value: builtins.str) -> None: ...
    @raw_contents.setter
    def raw_contents(self, value: builtins.str) -> None: ...
    def __new__(cls, *, filename:builtins.str, raw_contents:builtins.str) -> MultiRowCsvMetricsFile: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> MultiRowCsvMetricsFile: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> MultiRowCsvMetricsFile: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> MultiRowCsvMetricsFile: ...

class NucleicAcidConcentration:
    @value.setter
    def value(self, value: builtins.float) -> None: ...
    @unit.setter
    def unit(self, value: tuple[MassUnit, VolumeUnit]) -> None: ...
    def __new__(cls, *, value:builtins.float, unit:tuple[MassUnit, VolumeUnit]) -> NucleicAcidConcentration: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NucleicAcidConcentration: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NucleicAcidConcentration: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NucleicAcidConcentration: ...

class SingleRowCsvMetricsFile:
    @filename.setter
    def filename(self, value: builtins.str) -> None: ...
    @raw_contents.setter
    def raw_contents(self, value: builtins.str) -> None: ...
    def __new__(cls, *, filename:builtins.str, raw_contents:builtins.str) -> SingleRowCsvMetricsFile: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SingleRowCsvMetricsFile: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SingleRowCsvMetricsFile: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SingleRowCsvMetricsFile: ...

class SpecimenMeasurementData:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenMeasurementData: ...
    class Rin(SpecimenMeasurementData):
        __match_args__ = ("measured_at", "instrument_name", "value",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float) -> SpecimenMeasurementData.Rin: ...
    
    class Dv200(SpecimenMeasurementData):
        __match_args__ = ("measured_at", "instrument_name", "value",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float) -> SpecimenMeasurementData.Dv200: ...
    

class SuspensionMeasurementData:
    @fields.setter
    def fields(self, value: SuspensionMeasurementFields) -> None: ...
    @is_post_hybridization.setter
    def is_post_hybridization(self, value: builtins.bool) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionMeasurementData: ...

class SuspensionMeasurementFields:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionMeasurementFields: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionMeasurementFields: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionMeasurementFields: ...
    class Concentration(SuspensionMeasurementFields):
        __match_args__ = ("measured_at", "instrument_name", "counting_method", "value", "unit",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def counting_method(self) -> CellCountingMethod: ...
        @property
        def value(self) -> builtins.float: ...
        @property
        def unit(self) -> tuple[BiologicalMaterial, VolumeUnit]: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, counting_method:CellCountingMethod, value:builtins.float, unit:tuple[BiologicalMaterial, VolumeUnit]) -> SuspensionMeasurementFields.Concentration: ...
    
    class Volume(SuspensionMeasurementFields):
        __match_args__ = ("measured_at", "value", "unit",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def value(self) -> builtins.float: ...
        @property
        def unit(self) -> VolumeUnit: ...
        def __new__(cls, measured_at:datetime.datetime, value:builtins.float, unit:VolumeUnit) -> SuspensionMeasurementFields.Volume: ...
    
    class Viability(SuspensionMeasurementFields):
        __match_args__ = ("measured_at", "instrument_name", "value",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float) -> SuspensionMeasurementFields.Viability: ...
    
    class MeanDiameter(SuspensionMeasurementFields):
        __match_args__ = ("measured_at", "instrument_name", "value", "unit",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        @property
        def unit(self) -> tuple[BiologicalMaterial, LengthUnit]: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float, unit:tuple[BiologicalMaterial, LengthUnit]) -> SuspensionMeasurementFields.MeanDiameter: ...
    

class SuspensionPoolMeasurementData:
    @fields.setter
    def fields(self, value: SuspensionMeasurementFields) -> None: ...
    @is_post_storage.setter
    def is_post_storage(self, value: builtins.bool) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionPoolMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionPoolMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionPoolMeasurementData: ...

class BiologicalMaterial(Enum):
    Cells = ...
    Nuclei = ...

    def __new__(cls, s:builtins.str) -> BiologicalMaterial: ...

class BlockFixative(Enum):
    FormaldehydeDerivative = ...

    def __new__(cls, s:builtins.str) -> BlockFixative: ...

class CellCountingMethod(Enum):
    BrightField = ...
    Aopi = ...
    TrypanBlue = ...

    def __new__(cls, s:builtins.str) -> CellCountingMethod: ...

class FixedBlockEmbeddingMatrix(Enum):
    Paraffin = ...

    def __new__(cls, s:builtins.str) -> FixedBlockEmbeddingMatrix: ...

class FrozenBlockEmbeddingMatrix(Enum):
    CarboxymethylCellulose = ...
    OptimalCuttingTemperatureCompound = ...

    def __new__(cls, s:builtins.str) -> FrozenBlockEmbeddingMatrix: ...

class LengthUnit(Enum):
    Micrometer = ...

    def __new__(cls, s:builtins.str) -> LengthUnit: ...

class LibraryType(Enum):
    AntibodyCapture = ...
    AntigenCapture = ...
    ChromatinAccessibility = ...
    CrisprGuideCapture = ...
    Custom = ...
    GeneExpression = ...
    MultiplexingCapture = ...
    Vdj = ...
    VdjB = ...
    VdjT = ...
    VdjTGd = ...

    def __new__(cls, s:builtins.str) -> LibraryType: ...

class MassUnit(Enum):
    Nanogram = ...
    Picogram = ...

    def __new__(cls, s:builtins.str) -> MassUnit: ...

class Species(Enum):
    AmbystomaMexicanum = ...
    CanisFamiliaris = ...
    CallithrixJacchus = ...
    DrosophilaMelanogaster = ...
    GasterosteusAculeatus = ...
    HomoSapiens = ...
    MusMusculus = ...
    RattusNorvegicus = ...
    SminthopsisCrassicaudata = ...

    def __new__(cls, s:builtins.str) -> Species: ...

class SpecimenType(Enum):
    Block = ...
    Suspension = ...
    Tissue = ...

    def __new__(cls, s:builtins.str) -> SpecimenType: ...

class SuspensionFixative(Enum):
    DithiobisSuccinimidylpropionate = ...
    FormaldehydeDerivative = ...

    def __new__(cls, s:builtins.str) -> SuspensionFixative: ...

class TissueFixative(Enum):
    DithiobisSuccinimidylpropionate = ...

    def __new__(cls, s:builtins.str) -> TissueFixative: ...

class UserRole(Enum):
    AppAdmin = ...
    BiologyStaff = ...
    ComputationalStaff = ...

    def __new__(cls, s:builtins.str) -> UserRole: ...

class VolumeUnit(Enum):
    Microliter = ...
    Millliter = ...

    def __new__(cls, s:builtins.str) -> VolumeUnit: ...

