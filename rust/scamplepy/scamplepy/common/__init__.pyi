# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing
from enum import Enum

class SpecimenMeasurementData:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenMeasurementData: ...
    class Rin(SpecimenMeasurementData):
        __match_args__ = ("measured_at", "instrument_name", "value",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float) -> SpecimenMeasurementData.Rin: ...
    
    class Dv200(SpecimenMeasurementData):
        __match_args__ = ("measured_at", "instrument_name", "value",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float) -> SpecimenMeasurementData.Dv200: ...
    

class SuspensionMeasurementData:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionMeasurementData: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionMeasurementData: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionMeasurementData: ...

class SuspensionMeasurementDataCommon:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionMeasurementDataCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionMeasurementDataCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionMeasurementDataCommon: ...
    class Concentration(SuspensionMeasurementDataCommon):
        __match_args__ = ("measured_at", "instrument_name", "counting_method", "value", "unit",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def counting_method(self) -> CellCountingMethod: ...
        @property
        def value(self) -> builtins.float: ...
        @property
        def unit(self) -> tuple[BiologicalMaterial, VolumeUnit]: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, counting_method:CellCountingMethod, value:builtins.float, unit:tuple[BiologicalMaterial, VolumeUnit]) -> SuspensionMeasurementDataCommon.Concentration: ...
    
    class Volume(SuspensionMeasurementDataCommon):
        __match_args__ = ("measured_at", "value", "unit",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def value(self) -> builtins.float: ...
        @property
        def unit(self) -> VolumeUnit: ...
        def __new__(cls, measured_at:datetime.datetime, value:builtins.float, unit:VolumeUnit) -> SuspensionMeasurementDataCommon.Volume: ...
    
    class Viability(SuspensionMeasurementDataCommon):
        __match_args__ = ("measured_at", "instrument_name", "value",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float) -> SuspensionMeasurementDataCommon.Viability: ...
    
    class MeanDiameter(SuspensionMeasurementDataCommon):
        __match_args__ = ("measured_at", "instrument_name", "value", "unit",)
        @property
        def measured_at(self) -> datetime.datetime: ...
        @property
        def instrument_name(self) -> builtins.str: ...
        @property
        def value(self) -> builtins.float: ...
        @property
        def unit(self) -> tuple[BiologicalMaterial, LengthUnit]: ...
        def __new__(cls, measured_at:datetime.datetime, instrument_name:builtins.str, value:builtins.float, unit:tuple[BiologicalMaterial, LengthUnit]) -> SuspensionMeasurementDataCommon.MeanDiameter: ...
    

class BiologicalMaterial(Enum):
    Cells = ...
    Nuclei = ...

class BlockFixative(Enum):
    FormaldehydeDerivative = ...

class CellCountingMethod(Enum):
    BrightField = ...
    Aopi = ...
    TrypanBlue = ...

class FixedBlockEmbeddingMatrix(Enum):
    Paraffin = ...

class FrozenBlockEmbeddingMatrix(Enum):
    CarboxymethylCellulose = ...
    OptimalCuttingTemperatureCompound = ...

class LengthUnit(Enum):
    Micrometer = ...

class LibraryType(Enum):
    AntibodyCapture = ...
    AntigenCapture = ...
    ChromatinAccessibility = ...
    CrisprGuideCapture = ...
    Custom = ...
    GeneExpression = ...
    MultiplexingCapture = ...
    Vdj = ...
    VdjB = ...
    VdjT = ...
    VdjTGd = ...

class MassUnit(Enum):
    Nanogram = ...
    Picogram = ...

class Species(Enum):
    AmbystomaMexicanum = ...
    CanisFamiliaris = ...
    CallithrixJacchus = ...
    DrosophilaMelanogaster = ...
    GasterosteusAculeatus = ...
    HomoSapiens = ...
    MusMusculus = ...
    RattusNorvegicus = ...
    SminthopsisCrassicaudata = ...

class SpecimenType(Enum):
    Block = ...
    Suspension = ...
    Tissue = ...

class SuspensionFixative(Enum):
    FormaldehydeDerivative = ...

class TissueFixative(Enum):
    DithiobisSuccinimidylropionate = ...

class UserRole(Enum):
    AppAdmin = ...
    BiologyStaff = ...
    ComputationalStaff = ...

class VolumeUnit(Enum):
    Microliter = ...
    Millliter = ...

