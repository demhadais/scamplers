from scamplepy.responses import *
from ..common import *
from uuid import *
# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import Any
import builtins
import datetime
import scamplepy.common
import typing
import uuid
import scamplepy

class Cdna:
    @property
    def summary(self) -> CdnaSummary: ...
    @property
    def prepared_by(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[CdnaMeasurement]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Cdna: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Cdna: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Cdna: ...

class CdnaMeasurement:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def cdna_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> NucleicAcidMeasurementData: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> CdnaMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> CdnaMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> CdnaMeasurement: ...

class CdnaSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def library_type(self) -> LibraryType: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def prepared_at(self) -> datetime.datetime: ...
    @property
    def n_amplification_cycles(self) -> builtins.int: ...
    @property
    def storage_location(self) -> typing.Optional[builtins.str]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> CdnaSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> CdnaSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> CdnaSummary: ...

class ChromiumDataset:
    @property
    def summary(self) -> ChromiumDatasetSummary: ...
    @property
    def library_ids(self) -> builtins.list[uuid.UUID]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...

class ChromiumDatasetSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def lab(self) -> LabSummary: ...
    @property
    def data_path(self) -> builtins.str: ...
    @property
    def delivered_at(self) -> datetime.datetime: ...
    @property
    def tenx_assay(self) -> TenxAssay: ...
    @property
    def metrics(self) -> ParsedMetrics: ...
    @property
    def web_summary(self) -> builtins.str: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> ChromiumDatasetSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> ChromiumDatasetSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> ChromiumDatasetSummary: ...

class ChromiumRun:
    def __eq__(self, other:builtins.object) -> builtins.bool: ...

class ChromiumRunSummaryWithParents:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def run_at(self) -> datetime.datetime: ...
    @property
    def run_by(self) -> uuid.UUID: ...
    @property
    def succeeded(self) -> builtins.bool: ...
    @property
    def assay(self) -> TenxAssay: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> ChromiumRunSummaryWithParents: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> ChromiumRunSummaryWithParents: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> ChromiumRunSummaryWithParents: ...

class CommitteeApproval:
    @property
    def institution_id(self) -> uuid.UUID: ...
    @property
    def specimen_id(self) -> uuid.UUID: ...
    @property
    def institution(self) -> Institution: ...
    @property
    def committee_type(self) -> builtins.str: ...
    @property
    def compliance_identifier(self) -> builtins.str: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> CommitteeApproval: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> CommitteeApproval: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> CommitteeApproval: ...

class Gems:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def chromium_run_id(self) -> uuid.UUID: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Gems: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Gems: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Gems: ...

class Institution:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Institution: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Institution: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Institution: ...

class Lab:
    @property
    def info(self) -> LabSummaryWithParents: ...
    @property
    def members(self) -> builtins.list[PersonSummary]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Lab: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Lab: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Lab: ...

class LabSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def delivery_dir(self) -> builtins.str: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LabSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LabSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LabSummary: ...

class LabSummaryWithParents:
    @property
    def id_(self) -> uuid.UUID: ...
    @property
    def summary(self) -> LabSummary: ...
    @property
    def pi(self) -> PersonSummary: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LabSummaryWithParents: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LabSummaryWithParents: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LabSummaryWithParents: ...

class Library:
    @property
    def info(self) -> LibrarySummaryWithParents: ...
    @property
    def prepared_by(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[LibraryMeasurement]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Library: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Library: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Library: ...

class LibraryMeasurement:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def library_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> NucleicAcidMeasurementData: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibraryMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibraryMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibraryMeasurement: ...

class LibrarySummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def single_index_set_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def dual_index_set_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def number_of_sample_index_pcr_cycles(self) -> builtins.int: ...
    @property
    def target_reads_per_cell(self) -> builtins.int: ...
    @property
    def prepared_at(self) -> datetime.datetime: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibrarySummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibrarySummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibrarySummary: ...

class LibrarySummaryWithParents:
    @property
    def id_(self) -> uuid.UUID: ...
    @property
    def summary(self) -> LibrarySummary: ...
    @property
    def cdna(self) -> CdnaSummary: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibrarySummaryWithParents: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibrarySummaryWithParents: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibrarySummaryWithParents: ...

class MultiplexingTag:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def tag_id(self) -> builtins.str: ...
    @property
    def type_(self) -> builtins.str: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> MultiplexingTag: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> MultiplexingTag: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> MultiplexingTag: ...

class ParsedMetrics:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> ParsedMetrics: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> ParsedMetrics: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> ParsedMetrics: ...
    class TenxSingleRowCsv(ParsedMetrics):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> SingleRowCsvMetricsFile: ...
        def __new__(cls, _0:SingleRowCsvMetricsFile) -> ParsedMetrics.TenxSingleRowCsv: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class TenxMultiRowCsvGroup(ParsedMetrics):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> _MultiRowCsvMetricsFileGroup: ...
        def __new__(cls, _0:_MultiRowCsvMetricsFileGroup) -> ParsedMetrics.TenxMultiRowCsvGroup: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class TenxJson(ParsedMetrics):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> JsonMetricsFile: ...
        def __new__(cls, _0:JsonMetricsFile) -> ParsedMetrics.TenxJson: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    

class Person:
    @property
    def info(self) -> PersonSummaryWithParents: ...
    @property
    def roles(self) -> builtins.list[UserRole]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Person: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Person: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Person: ...

class PersonSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def email(self) -> typing.Optional[builtins.str]: ...
    @property
    def orcid(self) -> typing.Optional[builtins.str]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> PersonSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> PersonSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> PersonSummary: ...

class PersonSummaryWithParents:
    @property
    def id_(self) -> uuid.UUID: ...
    @property
    def summary(self) -> PersonSummary: ...
    @property
    def institution(self) -> Institution: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> PersonSummaryWithParents: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> PersonSummaryWithParents: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> PersonSummaryWithParents: ...

class SequencingRun:
    @property
    def summary(self) -> SequencingRunSummary: ...
    @property
    def libraries(self) -> builtins.list[uuid.UUID]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SequencingRun: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SequencingRun: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SequencingRun: ...

class SequencingRunSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def begun_at(self) -> datetime.datetime: ...
    @property
    def finished_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SequencingRunSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SequencingRunSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SequencingRunSummary: ...

class Specimen:
    @property
    def info(self) -> SpecimenSummaryWithParents: ...
    @property
    def measurements(self) -> builtins.list[SpecimenMeasurement]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Specimen: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Specimen: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Specimen: ...

class SpecimenMeasurement:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def specimen_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SpecimenMeasurementData: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenMeasurement: ...

class SpecimenSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def received_at(self) -> datetime.datetime: ...
    @property
    def species(self) -> builtins.list[typing.Optional[builtins.str]]: ...
    @property
    def returned_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def embedded_in(self) -> typing.Optional[builtins.str]: ...
    @property
    def fixative(self) -> typing.Optional[builtins.str]: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @property
    def cryopreserved(self) -> builtins.bool: ...
    @property
    def tissue(self) -> builtins.str: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenSummary: ...

class SpecimenSummaryWithParents:
    @property
    def id_(self) -> uuid.UUID: ...
    @property
    def summary(self) -> SpecimenSummary: ...
    @property
    def lab(self) -> LabSummary: ...
    @property
    def submitted_by(self) -> PersonSummary: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenSummaryWithParents: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenSummaryWithParents: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenSummaryWithParents: ...

class Suspension:
    @property
    def info(self) -> SuspensionSummaryWithParents: ...
    @property
    def prepared_by(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[SuspensionMeasurement]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...

class SuspensionMeasurement:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def suspension_id(self) -> uuid.UUID: ...
    @property
    def data(self) -> SuspensionMeasurementData: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionMeasurement: ...

class SuspensionPool:
    @property
    def summary(self) -> SuspensionPoolSummary: ...
    @property
    def suspensions(self) -> builtins.list[SuspensionSummary]: ...
    @property
    def preparers(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[SuspensionPoolMeasurement]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...

class SuspensionPoolMeasurement:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def pool_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SuspensionMeasurementFields: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionPoolMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionPoolMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionPoolMeasurement: ...

class SuspensionPoolSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def pooled_at(self) -> datetime.datetime: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionPoolSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionPoolSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionPoolSummary: ...

class SuspensionSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def biological_material(self) -> builtins.str: ...
    @property
    def pooled_into(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def created_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def lysis_duration_minutes(self) -> typing.Optional[builtins.float]: ...
    @property
    def target_cell_recovery(self) -> builtins.float: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionSummary: ...

class SuspensionSummaryWithParents:
    @property
    def id_(self) -> uuid.UUID: ...
    @property
    def summary(self) -> SuspensionSummary: ...
    @property
    def parent_specimen(self) -> SpecimenSummary: ...
    @property
    def multiplexing_tag(self) -> typing.Optional[MultiplexingTag]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionSummaryWithParents: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionSummaryWithParents: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionSummaryWithParents: ...

class TenxAssay:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def library_types(self) -> typing.Optional[builtins.list[typing.Optional[LibraryType]]]: ...
    @property
    def sample_multiplexing(self) -> typing.Optional[SampleMultiplexing]: ...
    @property
    def chemistry_version(self) -> builtins.str: ...
    @property
    def protocol_url(self) -> builtins.str: ...
    @property
    def chromium_chip(self) -> typing.Optional[builtins.str]: ...
    @property
    def cmdlines(self) -> typing.Optional[builtins.list[typing.Optional[builtins.str]]]: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> TenxAssay: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> TenxAssay: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> TenxAssay: ...

