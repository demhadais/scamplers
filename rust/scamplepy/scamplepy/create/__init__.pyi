from scamplepy.create import *
from ..common import *
from uuid import *
# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import Any
import builtins
import datetime
import scamplepy.common
import typing
import uuid
import scamplepy
from enum import Enum

class LibraryTypeSpecification:
    @property
    def assay_id(self) -> uuid.UUID: ...
    @property
    def library_type(self) -> LibraryType: ...
    @property
    def index_kit(self) -> builtins.str: ...
    @property
    def cdna_volume_µl(self) -> builtins.float: ...
    @property
    def library_volume_µl(self) -> builtins.float: ...
    @assay_id.setter
    def assay_id(self, value: uuid.UUID) -> None: ...
    @library_type.setter
    def library_type(self, value: LibraryType) -> None: ...
    @index_kit.setter
    def index_kit(self, value: builtins.str) -> None: ...
    @cdna_volume_µl.setter
    def cdna_volume_µl(self, value: builtins.float) -> None: ...
    @library_volume_µl.setter
    def library_volume_µl(self, value: builtins.float) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibraryTypeSpecification: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibraryTypeSpecification: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibraryTypeSpecification: ...

class NewCdna:
    @property
    def library_type(self) -> LibraryType: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def prepared_at(self) -> datetime.datetime: ...
    @property
    def gems_id(self) -> uuid.UUID: ...
    @property
    def n_amplification_cycles(self) -> builtins.int: ...
    @property
    def volume_µl(self) -> builtins.float: ...
    @property
    def preparer_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewCdnaMeasurement]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @library_type.setter
    def library_type(self, value: LibraryType) -> None: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @prepared_at.setter
    def prepared_at(self, value: datetime.datetime) -> None: ...
    @gems_id.setter
    def gems_id(self, value: uuid.UUID) -> None: ...
    @n_amplification_cycles.setter
    def n_amplification_cycles(self, value: builtins.int) -> None: ...
    @volume_µl.setter
    def volume_µl(self, value: builtins.float) -> None: ...
    @preparer_ids.setter
    def preparer_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewCdnaMeasurement]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, library_type:LibraryType, readable_id:builtins.str, prepared_at:datetime.datetime, gems_id:uuid.UUID, n_amplification_cycles:builtins.int, volume_mcl:builtins.float, preparer_ids:typing.Sequence[uuid.UUID], measurements:typing.Sequence[NewCdnaMeasurement]=[], additional_data:typing.Optional[typing]=None) -> NewCdna: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCdna: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCdna: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCdna: ...

class NewCdnaGroup:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCdnaGroup: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCdnaGroup: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCdnaGroup: ...
    class Single(NewCdnaGroup):
        __match_args__ = ("cdna",)
        @property
        def cdna(self) -> NewCdna: ...
        def __new__(cls, cdna:NewCdna) -> NewCdnaGroup.Single: ...
    
    class Multiple(NewCdnaGroup):
        __match_args__ = ("cdna",)
        @property
        def cdna(self) -> builtins.list[NewCdna]: ...
        def __new__(cls, cdna:typing.Sequence[NewCdna]) -> NewCdnaGroup.Multiple: ...
    
    class OnChipMultiplexing(NewCdnaGroup):
        __match_args__ = ("cdna",)
        @property
        def cdna(self) -> builtins.list[NewCdna]: ...
        def __new__(cls, cdna:typing.Sequence[NewCdna]) -> NewCdnaGroup.OnChipMultiplexing: ...
    

class NewCdnaMeasurement:
    @property
    def cdna_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> NucleicAcidMeasurementData: ...
    @cdna_id.setter
    def cdna_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: NucleicAcidMeasurementData) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, measured_by:uuid.UUID, data:NucleicAcidMeasurementData, cdna_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewCdnaMeasurement: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCdnaMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCdnaMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCdnaMeasurement: ...

class NewCellrangerCountDataset:
    @property
    def inner(self) -> _NewChromiumDatasetCommon: ...
    @property
    def metrics(self) -> SingleRowCsvMetricsFile: ...
    @inner.setter
    def inner(self, value: _NewChromiumDatasetCommon) -> None: ...
    @metrics.setter
    def metrics(self, value: SingleRowCsvMetricsFile) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, lab_id:uuid.UUID, data_path:builtins.str, delivered_at:datetime.datetime, library_ids:typing.Sequence[uuid.UUID], web_summary:builtins.str, metrics:SingleRowCsvMetricsFile) -> NewCellrangerCountDataset: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCellrangerCountDataset: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCellrangerCountDataset: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCellrangerCountDataset: ...

class NewCellrangerMultiDataset:
    @property
    def inner(self) -> _NewChromiumDatasetCommon: ...
    @property
    def metrics(self) -> _MultiRowCsvMetricsFileGroup: ...
    @inner.setter
    def inner(self, value: _NewChromiumDatasetCommon) -> None: ...
    @metrics.setter
    def metrics(self, value: _MultiRowCsvMetricsFileGroup) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, lab_id:uuid.UUID, data_path:builtins.str, delivered_at:datetime.datetime, library_ids:typing.Sequence[uuid.UUID], web_summary:builtins.str, metrics:typing.Sequence[MultiRowCsvMetricsFile]) -> NewCellrangerMultiDataset: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCellrangerMultiDataset: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCellrangerMultiDataset: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCellrangerMultiDataset: ...

class NewCellrangerVdjDataset:
    @property
    def inner(self) -> _NewChromiumDatasetCommon: ...
    @property
    def metrics(self) -> SingleRowCsvMetricsFile: ...
    @inner.setter
    def inner(self, value: _NewChromiumDatasetCommon) -> None: ...
    @metrics.setter
    def metrics(self, value: SingleRowCsvMetricsFile) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, lab_id:uuid.UUID, data_path:builtins.str, delivered_at:datetime.datetime, library_ids:typing.Sequence[uuid.UUID], web_summary:builtins.str, metrics:SingleRowCsvMetricsFile) -> NewCellrangerVdjDataset: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCellrangerVdjDataset: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCellrangerVdjDataset: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCellrangerVdjDataset: ...

class NewCellrangerarcCountDataset:
    @property
    def inner(self) -> _NewChromiumDatasetCommon: ...
    @property
    def metrics(self) -> SingleRowCsvMetricsFile: ...
    @inner.setter
    def inner(self, value: _NewChromiumDatasetCommon) -> None: ...
    @metrics.setter
    def metrics(self, value: SingleRowCsvMetricsFile) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, lab_id:uuid.UUID, data_path:builtins.str, delivered_at:datetime.datetime, library_ids:typing.Sequence[uuid.UUID], web_summary:builtins.str, metrics:SingleRowCsvMetricsFile) -> NewCellrangerarcCountDataset: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCellrangerarcCountDataset: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCellrangerarcCountDataset: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCellrangerarcCountDataset: ...

class NewCellrangeratacCountDataset:
    @property
    def inner(self) -> _NewChromiumDatasetCommon: ...
    @property
    def metrics(self) -> JsonMetricsFile: ...
    @inner.setter
    def inner(self, value: _NewChromiumDatasetCommon) -> None: ...
    @metrics.setter
    def metrics(self, value: JsonMetricsFile) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, lab_id:uuid.UUID, data_path:builtins.str, delivered_at:datetime.datetime, library_ids:typing.Sequence[uuid.UUID], web_summary:builtins.str, metrics:JsonMetricsFile) -> NewCellrangeratacCountDataset: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCellrangeratacCountDataset: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCellrangeratacCountDataset: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCellrangeratacCountDataset: ...

class NewChromiumAssay:
    @property
    def inner(self) -> NewTenxAssayCommon: ...
    @property
    def library_types(self) -> builtins.list[LibraryType]: ...
    @property
    def sample_multiplexing(self) -> SampleMultiplexing: ...
    @property
    def chromium_chip(self) -> builtins.str: ...
    @property
    def cmdlines(self) -> builtins.list[builtins.str]: ...
    @property
    def library_type_specifications(self) -> builtins.list[LibraryTypeSpecification]: ...
    @inner.setter
    def inner(self, value: NewTenxAssayCommon) -> None: ...
    @library_types.setter
    def library_types(self, value: builtins.list[LibraryType]) -> None: ...
    @sample_multiplexing.setter
    def sample_multiplexing(self, value: SampleMultiplexing) -> None: ...
    @chromium_chip.setter
    def chromium_chip(self, value: builtins.str) -> None: ...
    @cmdlines.setter
    def cmdlines(self, value: builtins.list[builtins.str]) -> None: ...
    @library_type_specifications.setter
    def library_type_specifications(self, value: builtins.list[LibraryTypeSpecification]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewChromiumAssay: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewChromiumAssay: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewChromiumAssay: ...

class NewCommitteeApproval:
    @property
    def specimen_id(self) -> uuid.UUID: ...
    @property
    def institution_id(self) -> uuid.UUID: ...
    @property
    def committee_type(self) -> ComplianceCommitteeType: ...
    @property
    def compliance_identifier(self) -> builtins.str: ...
    @specimen_id.setter
    def specimen_id(self, value: uuid.UUID) -> None: ...
    @institution_id.setter
    def institution_id(self, value: uuid.UUID) -> None: ...
    @committee_type.setter
    def committee_type(self, value: ComplianceCommitteeType) -> None: ...
    @compliance_identifier.setter
    def compliance_identifier(self, value: builtins.str) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, institution_id:uuid.UUID, committee_type:ComplianceCommitteeType, compliance_identifier:builtins.str, specimen_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewCommitteeApproval: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCommitteeApproval: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCommitteeApproval: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCommitteeApproval: ...

class NewCryopreservedSuspension:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def cryopreserved(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: builtins.bool) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], tissue:builtins.str, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewCryopreservedSuspension: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCryopreservedSuspension: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCryopreservedSuspension: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCryopreservedSuspension: ...

class NewCryopreservedTissue:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def cryopreserved(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: builtins.bool) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], tissue:builtins.str, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewCryopreservedTissue: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCryopreservedTissue: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCryopreservedTissue: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCryopreservedTissue: ...

class NewFixedBlock:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def embedded_in(self) -> FixedBlockEmbeddingMatrix: ...
    @property
    def fixative(self) -> BlockFixative: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @embedded_in.setter
    def embedded_in(self, value: FixedBlockEmbeddingMatrix) -> None: ...
    @fixative.setter
    def fixative(self, value: BlockFixative) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], embedded_in:FixedBlockEmbeddingMatrix, fixative:BlockFixative, tissue:builtins.str, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewFixedBlock: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFixedBlock: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFixedBlock: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFixedBlock: ...

class NewFixedOrFreshSuspension:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def fixative(self) -> typing.Optional[SuspensionFixative]: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @fixative.setter
    def fixative(self, value: typing.Optional[SuspensionFixative]) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], tissue:builtins.str, fixative:typing.Optional[SuspensionFixative]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewFixedOrFreshSuspension: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFixedOrFreshSuspension: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFixedOrFreshSuspension: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFixedOrFreshSuspension: ...

class NewFixedTissue:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def fixative(self) -> TissueFixative: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @fixative.setter
    def fixative(self, value: TissueFixative) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], fixative:TissueFixative, tissue:builtins.str, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewFixedTissue: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFixedTissue: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFixedTissue: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFixedTissue: ...

class NewFrozenBlock:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def embedded_in(self) -> FrozenBlockEmbeddingMatrix: ...
    @property
    def fixative(self) -> typing.Optional[BlockFixative]: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @embedded_in.setter
    def embedded_in(self, value: FrozenBlockEmbeddingMatrix) -> None: ...
    @fixative.setter
    def fixative(self, value: typing.Optional[BlockFixative]) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], embedded_in:FrozenBlockEmbeddingMatrix, tissue:builtins.str, fixative:typing.Optional[BlockFixative]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewFrozenBlock: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFrozenBlock: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFrozenBlock: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFrozenBlock: ...

class NewFrozenSuspension:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], tissue:builtins.str, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewFrozenSuspension: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFrozenSuspension: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFrozenSuspension: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFrozenSuspension: ...

class NewFrozenTissue:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], tissue:builtins.str, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, additional_data:typing.Optional[typing]=None) -> NewFrozenTissue: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFrozenTissue: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFrozenTissue: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFrozenTissue: ...

class NewInstitution:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def name(self) -> builtins.str: ...
    @id.setter
    def id(self, value: uuid.UUID) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, id:uuid.UUID, name:builtins.str) -> NewInstitution: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewInstitution: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewInstitution: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewInstitution: ...

class NewLab:
    @property
    def name(self) -> builtins.str: ...
    @property
    def pi_id(self) -> uuid.UUID: ...
    @property
    def delivery_dir(self) -> builtins.str: ...
    @property
    def member_ids(self) -> builtins.list[uuid.UUID]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @pi_id.setter
    def pi_id(self, value: uuid.UUID) -> None: ...
    @delivery_dir.setter
    def delivery_dir(self, value: builtins.str) -> None: ...
    @member_ids.setter
    def member_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, pi_id:uuid.UUID, delivery_dir:builtins.str, member_ids:typing.Sequence[uuid.UUID]=[]) -> NewLab: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewLab: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewLab: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewLab: ...

class NewLibrary:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def cdna_id(self) -> uuid.UUID: ...
    @property
    def single_index_set_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def dual_index_set_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def number_of_sample_index_pcr_cycles(self) -> builtins.int: ...
    @property
    def volume_µl(self) -> builtins.float: ...
    @property
    def target_reads_per_cell(self) -> builtins.int: ...
    @property
    def prepared_at(self) -> datetime.datetime: ...
    @property
    def preparer_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewLibraryMeasurement]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @cdna_id.setter
    def cdna_id(self, value: uuid.UUID) -> None: ...
    @single_index_set_name.setter
    def single_index_set_name(self, value: typing.Optional[builtins.str]) -> None: ...
    @dual_index_set_name.setter
    def dual_index_set_name(self, value: typing.Optional[builtins.str]) -> None: ...
    @number_of_sample_index_pcr_cycles.setter
    def number_of_sample_index_pcr_cycles(self, value: builtins.int) -> None: ...
    @volume_µl.setter
    def volume_µl(self, value: builtins.float) -> None: ...
    @target_reads_per_cell.setter
    def target_reads_per_cell(self, value: builtins.int) -> None: ...
    @prepared_at.setter
    def prepared_at(self, value: datetime.datetime) -> None: ...
    @preparer_ids.setter
    def preparer_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewLibraryMeasurement]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, cdna_id:uuid.UUID, number_of_sample_index_pcr_cycles:builtins.int, volume_mcl:builtins.float, target_reads_per_cell:builtins.int, prepared_at:datetime.datetime, preparer_ids:typing.Sequence[uuid.UUID], single_index_set_name:typing.Optional[builtins.str]=None, dual_index_set_name:typing.Optional[builtins.str]=None, measurements:typing.Sequence[NewLibraryMeasurement]=[], additional_data:typing.Optional[typing]=None) -> NewLibrary: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewLibrary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewLibrary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewLibrary: ...

class NewLibraryMeasurement:
    @property
    def library_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> NucleicAcidMeasurementData: ...
    @library_id.setter
    def library_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: NucleicAcidMeasurementData) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, measured_by:uuid.UUID, data:NucleicAcidMeasurementData, library_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewLibraryMeasurement: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewLibraryMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewLibraryMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewLibraryMeasurement: ...

class NewOcmChromiumRun:
    @property
    def inner(self) -> _NewChromiumRunCommon: ...
    @property
    def gems(self) -> builtins.list[NewOcmGems]: ...
    @inner.setter
    def inner(self, value: _NewChromiumRunCommon) -> None: ...
    @gems.setter
    def gems(self, value: builtins.list[NewOcmGems]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, assay_id:uuid.UUID, run_at:datetime.datetime, succeeded:builtins.bool, run_by:uuid.UUID, gems:typing.Sequence[NewOcmGems], additional_data:typing.Optional[typing]=None) -> NewOcmChromiumRun: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewOcmChromiumRun: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewOcmChromiumRun: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewOcmChromiumRun: ...

class NewOcmGems:
    @property
    def inner(self) -> _NewGemsCommon: ...
    @property
    def loading(self) -> builtins.list[NewSingleplexChipLoading]: ...
    @inner.setter
    def inner(self, value: _NewGemsCommon) -> None: ...
    @loading.setter
    def loading(self, value: builtins.list[NewSingleplexChipLoading]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, loading:typing.Sequence[NewSingleplexChipLoading]) -> NewOcmGems: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewOcmGems: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewOcmGems: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewOcmGems: ...

class NewPerson:
    @property
    def name(self) -> builtins.str: ...
    @property
    def email(self) -> builtins.str: ...
    @property
    def orcid(self) -> typing.Optional[builtins.str]: ...
    @property
    def institution_id(self) -> uuid.UUID: ...
    @property
    def ms_user_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def roles(self) -> builtins.list[UserRole]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @email.setter
    def email(self, value: builtins.str) -> None: ...
    @orcid.setter
    def orcid(self, value: typing.Optional[builtins.str]) -> None: ...
    @institution_id.setter
    def institution_id(self, value: uuid.UUID) -> None: ...
    @ms_user_id.setter
    def ms_user_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @roles.setter
    def roles(self, value: builtins.list[UserRole]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, name:builtins.str, email:builtins.str, institution_id:uuid.UUID, ms_user_id:typing.Optional[uuid.UUID]=None, roles:typing.Sequence[UserRole]=[]) -> NewPerson: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewPerson: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewPerson: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewPerson: ...

class NewPoolMultiplexChipLoading:
    @property
    def suspension_pool_id(self) -> uuid.UUID: ...
    @property
    def inner(self) -> _NewChipLoadingCommon: ...
    @suspension_pool_id.setter
    def suspension_pool_id(self, value: uuid.UUID) -> None: ...
    @inner.setter
    def inner(self, value: _NewChipLoadingCommon) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, suspension_pool_id:uuid.UUID, suspension_volume_loaded:SuspensionMeasurementFields, buffer_volume_loaded:SuspensionMeasurementFields, additional_data:typing.Optional[typing]=None) -> NewPoolMultiplexChipLoading: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewPoolMultiplexChipLoading: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewPoolMultiplexChipLoading: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewPoolMultiplexChipLoading: ...

class NewPoolMultiplexChromiumRun:
    @property
    def inner(self) -> _NewChromiumRunCommon: ...
    @property
    def gems(self) -> builtins.list[NewPoolMultiplexGems]: ...
    @inner.setter
    def inner(self, value: _NewChromiumRunCommon) -> None: ...
    @gems.setter
    def gems(self, value: builtins.list[NewPoolMultiplexGems]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, assay_id:uuid.UUID, run_at:datetime.datetime, run_by:uuid.UUID, succeeded:builtins.bool, gems:typing.Sequence[NewPoolMultiplexGems], additional_data:typing.Optional[typing]=None) -> NewPoolMultiplexChromiumRun: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewPoolMultiplexChromiumRun: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewPoolMultiplexChromiumRun: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewPoolMultiplexChromiumRun: ...

class NewPoolMultiplexGems:
    @property
    def inner(self) -> _NewGemsCommon: ...
    @property
    def loading(self) -> builtins.list[NewPoolMultiplexChipLoading]: ...
    @inner.setter
    def inner(self, value: _NewGemsCommon) -> None: ...
    @loading.setter
    def loading(self, value: builtins.list[NewPoolMultiplexChipLoading]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, suspension_pool_id:uuid.UUID, suspension_volume_loaded:SuspensionMeasurementFields, buffer_volume_loaded:SuspensionMeasurementFields, additional_data:typing.Optional[typing]=None) -> NewPoolMultiplexGems: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewPoolMultiplexGems: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewPoolMultiplexGems: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewPoolMultiplexGems: ...

class NewSequencingRun:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def begun_at(self) -> datetime.datetime: ...
    @property
    def libraries(self) -> builtins.list[NewSequencingSubmission]: ...
    @property
    def finished_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @begun_at.setter
    def begun_at(self, value: datetime.datetime) -> None: ...
    @libraries.setter
    def libraries(self, value: builtins.list[NewSequencingSubmission]) -> None: ...
    @finished_at.setter
    def finished_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, begun_at:datetime.datetime, libraries:typing.Sequence[NewSequencingSubmission], finished_at:typing.Optional[datetime.datetime]=None, additional_data:typing.Optional[typing]=None) -> NewSequencingRun: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSequencingRun: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSequencingRun: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSequencingRun: ...

class NewSequencingSubmission:
    @property
    def sequencing_run_id(self) -> uuid.UUID: ...
    @property
    def library_id(self) -> uuid.UUID: ...
    @property
    def submitted_at(self) -> datetime.datetime: ...
    @sequencing_run_id.setter
    def sequencing_run_id(self, value: uuid.UUID) -> None: ...
    @library_id.setter
    def library_id(self, value: uuid.UUID) -> None: ...
    @submitted_at.setter
    def submitted_at(self, value: datetime.datetime) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, library_id:uuid.UUID, submitted_at:datetime.datetime, sequencing_run_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewSequencingSubmission: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSequencingSubmission: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSequencingSubmission: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSequencingSubmission: ...

class NewSingleplexChipLoading:
    @property
    def suspension_id(self) -> uuid.UUID: ...
    @property
    def inner(self) -> _NewChipLoadingCommon: ...
    @suspension_id.setter
    def suspension_id(self, value: uuid.UUID) -> None: ...
    @inner.setter
    def inner(self, value: _NewChipLoadingCommon) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, suspension_id:uuid.UUID, suspension_volume_loaded:SuspensionMeasurementFields, buffer_volume_loaded:SuspensionMeasurementFields, additional_data:typing.Optional[typing]=None) -> NewSingleplexChipLoading: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSingleplexChipLoading: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSingleplexChipLoading: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSingleplexChipLoading: ...

class NewSingleplexChromiumRun:
    @property
    def inner(self) -> _NewChromiumRunCommon: ...
    @property
    def gems(self) -> builtins.list[NewSingleplexGems]: ...
    @inner.setter
    def inner(self, value: _NewChromiumRunCommon) -> None: ...
    @gems.setter
    def gems(self, value: builtins.list[NewSingleplexGems]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, assay_id:uuid.UUID, run_at:datetime.datetime, run_by:uuid.UUID, succeeded:builtins.bool, gems:typing.Sequence[NewSingleplexGems], additional_data:typing.Optional[typing]=None) -> NewSingleplexChromiumRun: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSingleplexChromiumRun: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSingleplexChromiumRun: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSingleplexChromiumRun: ...

class NewSingleplexGems:
    @property
    def inner(self) -> _NewGemsCommon: ...
    @property
    def loading(self) -> builtins.list[NewSingleplexChipLoading]: ...
    @inner.setter
    def inner(self, value: _NewGemsCommon) -> None: ...
    @loading.setter
    def loading(self, value: builtins.list[NewSingleplexChipLoading]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, suspension_id:uuid.UUID, suspension_volume_loaded:SuspensionMeasurementFields, buffer_volume_loaded:SuspensionMeasurementFields, additional_data:typing.Optional[typing]=None) -> NewSingleplexGems: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSingleplexGems: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSingleplexGems: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSingleplexGems: ...

class NewSpecimenMeasurement:
    @property
    def specimen_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SpecimenMeasurementData: ...
    @specimen_id.setter
    def specimen_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: SpecimenMeasurementData) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, measured_by:uuid.UUID, data:SpecimenMeasurementData, specimen_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewSpecimenMeasurement: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSpecimenMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSpecimenMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSpecimenMeasurement: ...

class NewSuspension:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def parent_specimen_id(self) -> uuid.UUID: ...
    @property
    def biological_material(self) -> BiologicalMaterial: ...
    @property
    def target_cell_recovery(self) -> builtins.float: ...
    @property
    def preparer_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSuspensionMeasurement]: ...
    @property
    def created_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def pooled_into(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def multiplexing_tag_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def lysis_duration_minutes(self) -> typing.Optional[builtins.float]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @parent_specimen_id.setter
    def parent_specimen_id(self, value: uuid.UUID) -> None: ...
    @biological_material.setter
    def biological_material(self, value: BiologicalMaterial) -> None: ...
    @target_cell_recovery.setter
    def target_cell_recovery(self, value: builtins.float) -> None: ...
    @preparer_ids.setter
    def preparer_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSuspensionMeasurement]) -> None: ...
    @created_at.setter
    def created_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @pooled_into.setter
    def pooled_into(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @multiplexing_tag_id.setter
    def multiplexing_tag_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @lysis_duration_minutes.setter
    def lysis_duration_minutes(self, value: typing.Optional[builtins.float]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, parent_specimen_id:uuid.UUID, biological_material:BiologicalMaterial, target_cell_recovery:builtins.float, preparer_ids:typing.Sequence[uuid.UUID], measurements:typing.Sequence[NewSuspensionMeasurement]=[], created_at:typing.Optional[datetime.datetime]=None, multiplexing_tag_id:typing.Optional[uuid.UUID]=None, lysis_duration_minutes:typing.Optional[builtins.float]=None, additional_data:typing.Optional[typing]=None) -> NewSuspension: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspension: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspension: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspension: ...

class NewSuspensionMeasurement:
    @property
    def suspension_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SuspensionMeasurementData: ...
    @suspension_id.setter
    def suspension_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: SuspensionMeasurementData) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, measured_by:uuid.UUID, data:SuspensionMeasurementFields, is_post_probe_hybridization:builtins.bool, suspension_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewSuspensionMeasurement: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspensionMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspensionMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspensionMeasurement: ...

class NewSuspensionPool:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def pooled_at(self) -> datetime.datetime: ...
    @property
    def suspensions(self) -> builtins.list[NewSuspension]: ...
    @property
    def preparer_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSuspensionPoolMeasurement]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @pooled_at.setter
    def pooled_at(self, value: datetime.datetime) -> None: ...
    @suspensions.setter
    def suspensions(self, value: builtins.list[NewSuspension]) -> None: ...
    @preparer_ids.setter
    def preparer_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSuspensionPoolMeasurement]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, pooled_at:datetime.datetime, suspensions:typing.Sequence[NewSuspension], preparer_ids:typing.Sequence[uuid.UUID], measurements:typing.Sequence[NewSuspensionPoolMeasurement]=[], additional_data:typing.Optional[typing]=None) -> NewSuspensionPool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspensionPool: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspensionPool: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspensionPool: ...

class NewSuspensionPoolMeasurement:
    @property
    def pool_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SuspensionMeasurementFields: ...
    @pool_id.setter
    def pool_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: SuspensionMeasurementFields) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, measured_by:uuid.UUID, data:SuspensionMeasurementFields, pool_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewSuspensionPoolMeasurement: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspensionPoolMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspensionPoolMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspensionPoolMeasurement: ...

class NewTenxAssayCommon:
    @property
    def name(self) -> builtins.str: ...
    @property
    def chemistry_version(self) -> builtins.str: ...
    @property
    def protocol_url(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @chemistry_version.setter
    def chemistry_version(self, value: builtins.str) -> None: ...
    @protocol_url.setter
    def protocol_url(self, value: builtins.str) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewTenxAssayCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewTenxAssayCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewTenxAssayCommon: ...

class _NewChipLoadingCommon:
    @property
    def gems_id(self) -> uuid.UUID: ...
    @property
    def suspension_volume_loaded(self) -> SuspensionMeasurementFields: ...
    @property
    def buffer_volume_loaded(self) -> SuspensionMeasurementFields: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @gems_id.setter
    def gems_id(self, value: uuid.UUID) -> None: ...
    @suspension_volume_loaded.setter
    def suspension_volume_loaded(self, value: SuspensionMeasurementFields) -> None: ...
    @buffer_volume_loaded.setter
    def buffer_volume_loaded(self, value: SuspensionMeasurementFields) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _NewChipLoadingCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _NewChipLoadingCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _NewChipLoadingCommon: ...

class _NewChromiumDatasetCommon:
    @property
    def name(self) -> builtins.str: ...
    @property
    def lab_id(self) -> uuid.UUID: ...
    @property
    def data_path(self) -> builtins.str: ...
    @property
    def delivered_at(self) -> datetime.datetime: ...
    @property
    def library_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def web_summary(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @lab_id.setter
    def lab_id(self, value: uuid.UUID) -> None: ...
    @data_path.setter
    def data_path(self, value: builtins.str) -> None: ...
    @delivered_at.setter
    def delivered_at(self, value: datetime.datetime) -> None: ...
    @library_ids.setter
    def library_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @web_summary.setter
    def web_summary(self, value: builtins.str) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _NewChromiumDatasetCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _NewChromiumDatasetCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _NewChromiumDatasetCommon: ...

class _NewChromiumRunCommon:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def assay_id(self) -> uuid.UUID: ...
    @property
    def run_at(self) -> datetime.datetime: ...
    @property
    def run_by(self) -> uuid.UUID: ...
    @property
    def succeeded(self) -> builtins.bool: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @assay_id.setter
    def assay_id(self, value: uuid.UUID) -> None: ...
    @run_at.setter
    def run_at(self, value: datetime.datetime) -> None: ...
    @run_by.setter
    def run_by(self, value: uuid.UUID) -> None: ...
    @succeeded.setter
    def succeeded(self, value: builtins.bool) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _NewChromiumRunCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _NewChromiumRunCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _NewChromiumRunCommon: ...

class _NewGemsCommon:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def chromium_run_id(self) -> uuid.UUID: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @chromium_run_id.setter
    def chromium_run_id(self, value: uuid.UUID) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _NewGemsCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _NewGemsCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _NewGemsCommon: ...

class _NewSpecimenCommon:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def submitted_by(self) -> uuid.UUID: ...
    @property
    def lab_id(self) -> uuid.UUID: ...
    @property
    def received_at(self) -> datetime.datetime: ...
    @property
    def species(self) -> builtins.list[Species]: ...
    @property
    def tissue(self) -> builtins.str: ...
    @property
    def committee_approvals(self) -> builtins.list[NewCommitteeApproval]: ...
    @property
    def returned_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def returned_by(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSpecimenMeasurement]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @submitted_by.setter
    def submitted_by(self, value: uuid.UUID) -> None: ...
    @lab_id.setter
    def lab_id(self, value: uuid.UUID) -> None: ...
    @received_at.setter
    def received_at(self, value: datetime.datetime) -> None: ...
    @species.setter
    def species(self, value: builtins.list[Species]) -> None: ...
    @tissue.setter
    def tissue(self, value: builtins.str) -> None: ...
    @committee_approvals.setter
    def committee_approvals(self, value: builtins.list[NewCommitteeApproval]) -> None: ...
    @returned_at.setter
    def returned_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @returned_by.setter
    def returned_by(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSpecimenMeasurement]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _NewSpecimenCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _NewSpecimenCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _NewSpecimenCommon: ...

class ComplianceCommitteeType(Enum):
    Ibc = ...
    Irb = ...
    Iacuc = ...

    def __new__(cls, s:builtins.str) -> ComplianceCommitteeType: ...

class MultiplexingTagType(Enum):
    FlexBarcode = ...
    OnChipMultiplexing = ...
    TotalSeqA = ...
    TotalSeqB = ...
    TotalSeqC = ...

    def __new__(cls, s:builtins.str) -> MultiplexingTagType: ...

