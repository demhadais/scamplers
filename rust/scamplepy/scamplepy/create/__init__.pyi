from scamplepy.create import * # noqa:403
from ..common import * # noqa:403
# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import scamplepy.common
import typing
import uuid
from enum import Enum

class LibraryTypeSpecification:
    @property
    def chemistry(self) -> builtins.str: ...
    @property
    def library_type(self) -> LibraryType: ...
    @property
    def index_kit(self) -> builtins.str: ...
    @property
    def cdna_volume_µl(self) -> builtins.float: ...
    @property
    def library_volume_µl(self) -> builtins.float: ...
    @chemistry.setter
    def chemistry(self, value: builtins.str) -> None: ...
    @library_type.setter
    def library_type(self, value: LibraryType) -> None: ...
    @index_kit.setter
    def index_kit(self, value: builtins.str) -> None: ...
    @cdna_volume_µl.setter
    def cdna_volume_µl(self, value: builtins.float) -> None: ...
    @library_volume_µl.setter
    def library_volume_µl(self, value: builtins.float) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibraryTypeSpecification: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibraryTypeSpecification: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibraryTypeSpecification: ...

class NewCommitteeApproval:
    @property
    def specimen_id(self) -> uuid.UUID: ...
    @property
    def institution_id(self) -> uuid.UUID: ...
    @property
    def committee_type(self) -> ComplianceCommitteeType: ...
    @property
    def compliance_identifier(self) -> builtins.str: ...
    @specimen_id.setter
    def specimen_id(self, value: uuid.UUID) -> None: ...
    @institution_id.setter
    def institution_id(self, value: uuid.UUID) -> None: ...
    @committee_type.setter
    def committee_type(self, value: ComplianceCommitteeType) -> None: ...
    @compliance_identifier.setter
    def compliance_identifier(self, value: builtins.str) -> None: ...
    def __new__(cls, *, institution_id:uuid.UUID, committee_type:ComplianceCommitteeType, compliance_identifier:builtins.str, specimen_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewCommitteeApproval: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCommitteeApproval: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCommitteeApproval: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCommitteeApproval: ...

class NewCryopreservedTissue:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def storage_buffer(self) -> typing.Optional[builtins.str]: ...
    @property
    def cryopreserved(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @storage_buffer.setter
    def storage_buffer(self, value: typing.Optional[builtins.str]) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: builtins.bool) -> None: ...
    @cryopreserved.setter
    def cryopreserved(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], storage_buffer:typing.Optional[builtins.str]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], notes:typing.Optional[builtins.str]=None, returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None) -> NewCryopreservedTissue: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewCryopreservedTissue: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewCryopreservedTissue: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewCryopreservedTissue: ...

class NewFixedBlock:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def embedded_in(self) -> FixedBlockEmbeddingMatrix: ...
    @property
    def fixative(self) -> BlockFixative: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @embedded_in.setter
    def embedded_in(self, value: FixedBlockEmbeddingMatrix) -> None: ...
    @fixative.setter
    def fixative(self, value: BlockFixative) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], embedded_in:FixedBlockEmbeddingMatrix, fixative:BlockFixative, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], notes:typing.Optional[builtins.str]=None, returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None) -> NewFixedBlock: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFixedBlock: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFixedBlock: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFixedBlock: ...

class NewFixedTissue:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def fixative(self) -> TissueFixative: ...
    @property
    def storage_buffer(self) -> typing.Optional[builtins.str]: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @fixative.setter
    def fixative(self, value: TissueFixative) -> None: ...
    @storage_buffer.setter
    def storage_buffer(self, value: typing.Optional[builtins.str]) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], fixative:TissueFixative, storage_buffer:typing.Optional[builtins.str]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], notes:typing.Optional[builtins.str]=None, returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None) -> NewFixedTissue: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFixedTissue: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFixedTissue: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFixedTissue: ...

class NewFrozenBlock:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def embedded_in(self) -> FrozenBlockEmbeddingMatrix: ...
    @property
    def fixative(self) -> typing.Optional[BlockFixative]: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @embedded_in.setter
    def embedded_in(self, value: FrozenBlockEmbeddingMatrix) -> None: ...
    @fixative.setter
    def fixative(self, value: typing.Optional[BlockFixative]) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], embedded_in:FrozenBlockEmbeddingMatrix, fixative:typing.Optional[BlockFixative]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], notes:typing.Optional[builtins.str]=None, returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None) -> NewFrozenBlock: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFrozenBlock: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFrozenBlock: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFrozenBlock: ...

class NewFrozenTissue:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def storage_buffer(self) -> typing.Optional[builtins.str]: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @storage_buffer.setter
    def storage_buffer(self, value: typing.Optional[builtins.str]) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @frozen.setter
    def frozen(self, value: builtins.bool) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def __new__(cls, *, readable_id:builtins.str, name:builtins.str, submitted_by:uuid.UUID, lab_id:uuid.UUID, received_at:datetime.datetime, species:typing.Sequence[Species], storage_buffer:typing.Optional[builtins.str]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], committee_approvals:typing.Sequence[NewCommitteeApproval]=[], notes:typing.Optional[builtins.str]=None, returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None) -> NewFrozenTissue: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewFrozenTissue: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewFrozenTissue: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewFrozenTissue: ...

class NewInstitution:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def name(self) -> builtins.str: ...
    @id.setter
    def id(self, value: uuid.UUID) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    def __new__(cls, *, id:uuid.UUID, name:builtins.str) -> NewInstitution: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewInstitution: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewInstitution: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewInstitution: ...

class NewLab:
    @property
    def name(self) -> builtins.str: ...
    @property
    def pi_id(self) -> uuid.UUID: ...
    @property
    def delivery_dir(self) -> builtins.str: ...
    @property
    def member_ids(self) -> builtins.list[uuid.UUID]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @pi_id.setter
    def pi_id(self, value: uuid.UUID) -> None: ...
    @delivery_dir.setter
    def delivery_dir(self, value: builtins.str) -> None: ...
    @member_ids.setter
    def member_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    def __new__(cls, *, name:builtins.str, pi_id:uuid.UUID, delivery_dir:builtins.str, member_ids:typing.Sequence[uuid.UUID]=[]) -> NewLab: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewLab: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewLab: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewLab: ...

class NewMultiplexingTag:
    @property
    def tag_id(self) -> builtins.str: ...
    @property
    def type_(self) -> MultiplexingTagType: ...
    @tag_id.setter
    def tag_id(self, value: builtins.str) -> None: ...
    @type_.setter
    def type_(self, value: MultiplexingTagType) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewMultiplexingTag: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewMultiplexingTag: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewMultiplexingTag: ...

class NewPerson:
    @property
    def name(self) -> builtins.str: ...
    @property
    def email(self) -> builtins.str: ...
    @property
    def orcid(self) -> typing.Optional[builtins.str]: ...
    @property
    def institution_id(self) -> uuid.UUID: ...
    @property
    def ms_user_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def roles(self) -> builtins.list[UserRole]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @email.setter
    def email(self, value: builtins.str) -> None: ...
    @orcid.setter
    def orcid(self, value: typing.Optional[builtins.str]) -> None: ...
    @institution_id.setter
    def institution_id(self, value: uuid.UUID) -> None: ...
    @ms_user_id.setter
    def ms_user_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @roles.setter
    def roles(self, value: builtins.list[UserRole]) -> None: ...
    def __new__(cls, *, name:builtins.str, email:builtins.str, institution_id:uuid.UUID, roles:typing.Sequence[UserRole]=[]) -> NewPerson: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewPerson: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewPerson: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewPerson: ...

class NewSpecimenMeasurement:
    @property
    def specimen_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SpecimenMeasurementData: ...
    @specimen_id.setter
    def specimen_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: SpecimenMeasurementData) -> None: ...
    def __new__(cls, *, measured_by:uuid.UUID, data:SpecimenMeasurementData, specimen_id:uuid.UUID=UUID('00000000-0000-0000-0000-000000000000')) -> NewSpecimenMeasurement: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSpecimenMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSpecimenMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSpecimenMeasurement: ...

class NewSuspension:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def parent_specimen_id(self) -> uuid.UUID: ...
    @property
    def biological_material(self) -> BiologicalMaterial: ...
    @property
    def target_cell_recovery(self) -> builtins.float: ...
    @property
    def target_reads_per_cell(self) -> builtins.int: ...
    @property
    def preparer_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSuspensionMeasurement]: ...
    @property
    def created_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def pooled_into_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def multiplexing_tag_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def lysis_duration_minutes(self) -> typing.Optional[builtins.float]: ...
    @property
    def notes(self) -> typing.Optional[builtins.str]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @parent_specimen_id.setter
    def parent_specimen_id(self, value: uuid.UUID) -> None: ...
    @biological_material.setter
    def biological_material(self, value: BiologicalMaterial) -> None: ...
    @target_cell_recovery.setter
    def target_cell_recovery(self, value: builtins.float) -> None: ...
    @target_reads_per_cell.setter
    def target_reads_per_cell(self, value: builtins.int) -> None: ...
    @preparer_ids.setter
    def preparer_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSuspensionMeasurement]) -> None: ...
    @created_at.setter
    def created_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @pooled_into_id.setter
    def pooled_into_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @multiplexing_tag_id.setter
    def multiplexing_tag_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @lysis_duration_minutes.setter
    def lysis_duration_minutes(self, value: typing.Optional[builtins.float]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.str]) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspension: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspension: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspension: ...

class NewSuspensionMeasurement:
    @property
    def suspension_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> SuspensionMeasurementData: ...
    @suspension_id.setter
    def suspension_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: SuspensionMeasurementData) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspensionMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspensionMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspensionMeasurement: ...

class NewVirtualSpecimen:
    @property
    def inner(self) -> _NewSpecimenCommon: ...
    @property
    def type_(self) -> SpecimenType: ...
    @property
    def fixative(self) -> typing.Optional[SuspensionFixative]: ...
    @inner.setter
    def inner(self, value: _NewSpecimenCommon) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    @fixative.setter
    def fixative(self, value: typing.Optional[SuspensionFixative]) -> None: ...
    @type_.setter
    def type_(self, value: SpecimenType) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewVirtualSpecimen: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewVirtualSpecimen: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewVirtualSpecimen: ...

class SuspensionPreparer:
    @property
    def suspension_id(self) -> uuid.UUID: ...
    @property
    def prepared_by(self) -> uuid.UUID: ...
    @suspension_id.setter
    def suspension_id(self, value: uuid.UUID) -> None: ...
    @prepared_by.setter
    def prepared_by(self, value: uuid.UUID) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionPreparer: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionPreparer: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionPreparer: ...

class _NewSpecimenCommon:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def submitted_by(self) -> uuid.UUID: ...
    @property
    def lab_id(self) -> uuid.UUID: ...
    @property
    def received_at(self) -> datetime.datetime: ...
    @property
    def species(self) -> builtins.list[Species]: ...
    @property
    def committee_approvals(self) -> builtins.list[NewCommitteeApproval]: ...
    @property
    def notes(self) -> typing.Optional[builtins.str]: ...
    @property
    def returned_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def returned_by(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSpecimenMeasurement]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @submitted_by.setter
    def submitted_by(self, value: uuid.UUID) -> None: ...
    @lab_id.setter
    def lab_id(self, value: uuid.UUID) -> None: ...
    @received_at.setter
    def received_at(self, value: datetime.datetime) -> None: ...
    @species.setter
    def species(self, value: builtins.list[Species]) -> None: ...
    @committee_approvals.setter
    def committee_approvals(self, value: builtins.list[NewCommitteeApproval]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.str]) -> None: ...
    @returned_at.setter
    def returned_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @returned_by.setter
    def returned_by(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSpecimenMeasurement]) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _NewSpecimenCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _NewSpecimenCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _NewSpecimenCommon: ...

class ComplianceCommitteeType(Enum):
    Ibc = ...
    Irb = ...
    Iacuc = ...

class MultiplexingTagType(Enum):
    FlexBarcode = ...
    Ocm = ...
    TotalSeqA = ...
    TotalSeqB = ...
    TotalSeqC = ...

