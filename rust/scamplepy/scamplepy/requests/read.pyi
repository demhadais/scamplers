# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing
import uuid
import scamplepy

class Institution:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> Institution: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> Institution: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> Institution: ...

class MultiplexingTag:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def tag_id(self) -> builtins.str: ...
    @property
    def type_(self) -> builtins.str: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> MultiplexingTag: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> MultiplexingTag: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> MultiplexingTag: ...

class PersonCore:
    @property
    def summary(self) -> PersonSummary: ...
    @property
    def institution(self) -> Institution: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> PersonCore: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> PersonCore: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> PersonCore: ...

class PersonSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def email(self) -> typing.Optional[builtins.str]: ...
    @property
    def orcid(self) -> typing.Optional[builtins.str]: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> PersonSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> PersonSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> PersonSummary: ...

class SpecimenSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def received_at(self) -> datetime.datetime: ...
    @property
    def species(self) -> builtins.list[typing.Optional[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.str]: ...
    @property
    def returned_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def type_(self) -> builtins.str: ...
    @property
    def embedded_in(self) -> typing.Optional[builtins.str]: ...
    @property
    def fixative(self) -> typing.Optional[builtins.str]: ...
    @property
    def frozen(self) -> builtins.bool: ...
    @property
    def cryopreserved(self) -> builtins.bool: ...
    @property
    def storage_buffer(self) -> typing.Optional[builtins.str]: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenSummary: ...

class SuspensionCore:
    @property
    def summary(self) -> SuspensionSummary: ...
    @property
    def parent_specimen(self) -> SpecimenSummary: ...
    @property
    def multiplexing_tag(self) -> MultiplexingTag: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionCore: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionCore: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionCore: ...

class SuspensionMeasurement:
    @property
    def measured_by(self) -> PersonSummary: ...
    @property
    def data(self) -> _SuspensionMeasurementData: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionMeasurement: ...

class SuspensionSummary:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def links(self) -> builtins.dict[builtins.str, builtins.str]: ...
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def biological_material(self) -> builtins.str: ...
    @property
    def created_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def lysis_duration_minutes(self) -> typing.Optional[builtins.float]: ...
    @property
    def target_cell_recovery(self) -> builtins.float: ...
    @property
    def target_reads_per_cell(self) -> builtins.int: ...
    @property
    def notes(self) -> typing.Optional[builtins.str]: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SuspensionSummary: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SuspensionSummary: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SuspensionSummary: ...

