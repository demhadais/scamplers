# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing
import uuid
import scamplepy

class LibraryTypeSpecification:
    @property
    def chemistry(self) -> builtins.str: ...
    @property
    def library_type(self) -> LibraryType: ...
    @property
    def index_kit(self) -> builtins.str: ...
    @property
    def cdna_volume_µl(self) -> builtins.float: ...
    @property
    def library_volume_µl(self) -> builtins.float: ...
    @chemistry.setter
    def chemistry(self, value: builtins.str) -> None: ...
    @library_type.setter
    def library_type(self, value: LibraryType) -> None: ...
    @index_kit.setter
    def index_kit(self, value: builtins.str) -> None: ...
    @cdna_volume_µl.setter
    def cdna_volume_µl(self, value: builtins.float) -> None: ...
    @library_volume_µl.setter
    def library_volume_µl(self, value: builtins.float) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LibraryTypeSpecification: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LibraryTypeSpecification: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LibraryTypeSpecification: ...

class NewInstitution:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def name(self) -> builtins.str: ...
    @id.setter
    def id(self, value: uuid.UUID) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewInstitution: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewInstitution: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewInstitution: ...

class NewMultiplexingTag:
    @property
    def tag_id(self) -> builtins.str: ...
    @property
    def type_(self) -> MultiplexingTagType: ...
    @tag_id.setter
    def tag_id(self, value: builtins.str) -> None: ...
    @type_.setter
    def type_(self, value: MultiplexingTagType) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewMultiplexingTag: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewMultiplexingTag: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewMultiplexingTag: ...

class NewPerson:
    @property
    def name(self) -> builtins.str: ...
    @property
    def email(self) -> builtins.str: ...
    @property
    def orcid(self) -> typing.Optional[builtins.str]: ...
    @property
    def institution_id(self) -> uuid.UUID: ...
    @property
    def ms_user_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def roles(self) -> builtins.list[UserRole]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @email.setter
    def email(self, value: builtins.str) -> None: ...
    @orcid.setter
    def orcid(self, value: typing.Optional[builtins.str]) -> None: ...
    @institution_id.setter
    def institution_id(self, value: uuid.UUID) -> None: ...
    @ms_user_id.setter
    def ms_user_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @roles.setter
    def roles(self, value: builtins.list[UserRole]) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewPerson: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewPerson: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewPerson: ...

class NewSuspension:
    @property
    def readable_id(self) -> builtins.str: ...
    @property
    def parent_specimen_id(self) -> uuid.UUID: ...
    @property
    def biological_material(self) -> BiologicalMaterial: ...
    @property
    def target_cell_recovery(self) -> builtins.float: ...
    @property
    def target_reads_per_cell(self) -> builtins.int: ...
    @property
    def preparer_ids(self) -> builtins.list[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSuspensionMeasurement]: ...
    @property
    def created_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def pooled_into_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def multiplexing_tag_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def lysis_duration_minutes(self) -> typing.Optional[builtins.float]: ...
    @property
    def notes(self) -> typing.Optional[builtins.str]: ...
    @readable_id.setter
    def readable_id(self, value: builtins.str) -> None: ...
    @parent_specimen_id.setter
    def parent_specimen_id(self, value: uuid.UUID) -> None: ...
    @biological_material.setter
    def biological_material(self, value: BiologicalMaterial) -> None: ...
    @target_cell_recovery.setter
    def target_cell_recovery(self, value: builtins.float) -> None: ...
    @target_reads_per_cell.setter
    def target_reads_per_cell(self, value: builtins.int) -> None: ...
    @preparer_ids.setter
    def preparer_ids(self, value: builtins.list[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSuspensionMeasurement]) -> None: ...
    @created_at.setter
    def created_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @pooled_into_id.setter
    def pooled_into_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @multiplexing_tag_id.setter
    def multiplexing_tag_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @lysis_duration_minutes.setter
    def lysis_duration_minutes(self, value: typing.Optional[builtins.float]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.str]) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspension: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspension: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspension: ...

class NewSuspensionMeasurement:
    @property
    def suspension_id(self) -> uuid.UUID: ...
    @property
    def measured_by(self) -> uuid.UUID: ...
    @property
    def data(self) -> _SuspensionMeasurementData: ...
    @suspension_id.setter
    def suspension_id(self, value: uuid.UUID) -> None: ...
    @measured_by.setter
    def measured_by(self, value: uuid.UUID) -> None: ...
    @data.setter
    def data(self, value: _SuspensionMeasurementData) -> None: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> NewSuspensionMeasurement: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> NewSuspensionMeasurement: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> NewSuspensionMeasurement: ...

