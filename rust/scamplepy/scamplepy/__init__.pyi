from scamplepy.create import *
from scamplepy.query import *
from scamplepy.update import *
from scamplepy.errors import *
from scamplepy.responses import *
# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import scamplepy.create
import scamplepy.query
import scamplepy.responses
import scamplepy.update
import typing
import uuid
from . import common
from . import create
from . import errors
from . import query
from . import responses
from . import update
from enum import Enum

class ScamplersClient:
    async def list_person_specimens(self, id:uuid.UUID, query:SpecimenQuery=...) -> builtins.list[Specimen]: ...
    async def list_multiplexing_tags(self) -> builtins.list[MultiplexingTag]: ...
    async def list_chromium_datasets(self, data:ChromiumDatasetQuery) -> builtins.list[ChromiumDataset]: ...
    async def fetch_chromium_dataset(self, data:uuid.UUID) -> ChromiumDataset: ...
    async def create_chromium_dataset(self, data:NewCellrangerarcCountDataset | NewCellrangeratacCountDataset | NewCellrangerCountDataset | NewCellrangerMultiDataset | NewCellrangerVdjDataset) -> ChromiumDataset: ...
    async def list_libraries(self, data:LibraryQuery) -> builtins.list[Library]: ...
    async def fetch_library(self, data:uuid.UUID) -> Library: ...
    async def create_library(self, data:NewLibrary) -> Library: ...
    async def list_cdna(self, data:CdnaQuery) -> builtins.list[Cdna]: ...
    async def fetch_cdna(self, data:uuid.UUID) -> Cdna: ...
    async def create_cdna(self, data:NewCdnaGroup) -> builtins.list[Cdna]: ...
    async def list_chromium_runs(self, data:ChromiumRunQuery) -> builtins.list[ChromiumRun]: ...
    async def fetch_chromium_run(self, data:uuid.UUID) -> ChromiumRun: ...
    async def create_chromium_run(self, data:NewSingleplexChromiumRun | NewOcmChromiumRun | NewPoolMultiplexChromiumRun) -> ChromiumRun: ...
    async def list_suspension_pools(self, data:SuspensionPoolQuery) -> builtins.list[SuspensionPool]: ...
    async def fetch_suspension_pool(self, data:uuid.UUID) -> SuspensionPool: ...
    async def create_suspension_pool(self, data:NewSuspensionPool) -> SuspensionPool: ...
    async def list_suspensions(self, data:SuspensionQuery) -> builtins.list[Suspension]: ...
    async def fetch_suspension(self, data:uuid.UUID) -> Suspension: ...
    async def create_suspension(self, data:NewSuspension) -> Suspension: ...
    async def list_sequencing_runs(self, data:SequencingRunQuery) -> builtins.list[SequencingRun]: ...
    async def fetch_sequencing_run(self, data:uuid.UUID) -> SequencingRun: ...
    async def create_sequencing_run(self, data:NewSequencingRun) -> SequencingRun: ...
    async def update_specimen(self, data:SpecimenUpdateCommon) -> Specimen: ...
    async def list_specimens(self, data:SpecimenQuery) -> builtins.list[Specimen]: ...
    async def fetch_specimen(self, data:uuid.UUID) -> Specimen: ...
    async def create_specimen(self, data:NewCryopreservedTissue | NewFixedTissue | NewFrozenTissue | NewFixedBlock | NewFrozenBlock | NewCryopreservedSuspension | NewFixedOrFreshSuspension | NewFrozenSuspension) -> Specimen: ...
    async def update_lab(self, data:LabUpdate) -> Lab: ...
    async def list_labs(self, data:LabQuery) -> builtins.list[Lab]: ...
    async def fetch_lab(self, data:uuid.UUID) -> Lab: ...
    async def create_lab(self, data:NewLab) -> Lab: ...
    async def update_person(self, data:PersonUpdate) -> Person: ...
    async def list_people(self, data:PersonQuery) -> builtins.list[Person]: ...
    async def fetch_person(self, data:uuid.UUID) -> Person: ...
    async def create_person(self, data:NewPerson) -> Person: ...
    async def list_institutions(self, data:InstitutionQuery) -> builtins.list[Institution]: ...
    async def fetch_institution(self, data:uuid.UUID) -> Institution: ...
    async def create_institution(self, data:NewInstitution) -> Institution: ...
    def __new__(cls, *, api_base_url:builtins.str, api_key:typing.Optional[builtins.str]=None, accept_invalid_certificates:builtins.bool=False) -> ScamplersClient: ...

class ScamplersErrorResponse:
    ...

class _MultiRowCsvMetricsFileGroup:
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> _MultiRowCsvMetricsFileGroup: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> _MultiRowCsvMetricsFileGroup: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> _MultiRowCsvMetricsFileGroup: ...

class SampleMultiplexing(Enum):
    Cellplex = ...
    FlexBarcode = ...
    Hashtag = ...
    OnChipMultiplexing = ...
    Singleplex = ...

    def __new__(cls, s:builtins.str) -> SampleMultiplexing: ...

