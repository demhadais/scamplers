from scamplepy.update import *
from ..common import *
from uuid import *
# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import Any
import builtins
import datetime
import scamplepy.common
import scamplepy.create
import typing
import uuid

class LabUpdate:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def name(self) -> typing.Optional[builtins.str]: ...
    @property
    def pi_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def delivery_dir(self) -> typing.Optional[builtins.str]: ...
    @property
    def add_members(self) -> builtins.list[uuid.UUID]: ...
    @property
    def remove_members(self) -> builtins.list[uuid.UUID]: ...
    @id.setter
    def id(self, value: uuid.UUID) -> None: ...
    @name.setter
    def name(self, value: typing.Optional[builtins.str]) -> None: ...
    @pi_id.setter
    def pi_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @delivery_dir.setter
    def delivery_dir(self, value: typing.Optional[builtins.str]) -> None: ...
    @add_members.setter
    def add_members(self, value: builtins.list[uuid.UUID]) -> None: ...
    @remove_members.setter
    def remove_members(self, value: builtins.list[uuid.UUID]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> LabUpdate: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> LabUpdate: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> LabUpdate: ...

class PersonUpdate:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def name(self) -> typing.Optional[builtins.str]: ...
    @property
    def email(self) -> typing.Optional[builtins.str]: ...
    @property
    def ms_user_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def orcid(self) -> typing.Optional[builtins.str]: ...
    @property
    def institution_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def grant_roles(self) -> builtins.list[UserRole]: ...
    @property
    def revoke_roles(self) -> builtins.list[UserRole]: ...
    @id.setter
    def id(self, value: uuid.UUID) -> None: ...
    @name.setter
    def name(self, value: typing.Optional[builtins.str]) -> None: ...
    @email.setter
    def email(self, value: typing.Optional[builtins.str]) -> None: ...
    @ms_user_id.setter
    def ms_user_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @orcid.setter
    def orcid(self, value: typing.Optional[builtins.str]) -> None: ...
    @institution_id.setter
    def institution_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @grant_roles.setter
    def grant_roles(self, value: builtins.list[UserRole]) -> None: ...
    @revoke_roles.setter
    def revoke_roles(self, value: builtins.list[UserRole]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> PersonUpdate: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> PersonUpdate: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> PersonUpdate: ...

class SpecimenUpdateCommon:
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def readable_id(self) -> typing.Optional[builtins.str]: ...
    @property
    def name(self) -> typing.Optional[builtins.str]: ...
    @property
    def submitted_by(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def lab_id(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def received_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def species(self) -> typing.Optional[builtins.list[Species]]: ...
    @property
    def tissue(self) -> typing.Optional[builtins.str]: ...
    @property
    def committee_approvals(self) -> builtins.list[NewCommitteeApproval]: ...
    @property
    def returned_at(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def returned_by(self) -> typing.Optional[uuid.UUID]: ...
    @property
    def measurements(self) -> builtins.list[NewSpecimenMeasurement]: ...
    @property
    def additional_data(self) -> typing.Optional[typing]: ...
    @id.setter
    def id(self, value: uuid.UUID) -> None: ...
    @readable_id.setter
    def readable_id(self, value: typing.Optional[builtins.str]) -> None: ...
    @name.setter
    def name(self, value: typing.Optional[builtins.str]) -> None: ...
    @submitted_by.setter
    def submitted_by(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @lab_id.setter
    def lab_id(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @received_at.setter
    def received_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @species.setter
    def species(self, value: typing.Optional[builtins.list[Species]]) -> None: ...
    @tissue.setter
    def tissue(self, value: typing.Optional[builtins.str]) -> None: ...
    @committee_approvals.setter
    def committee_approvals(self, value: builtins.list[NewCommitteeApproval]) -> None: ...
    @returned_at.setter
    def returned_at(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @returned_by.setter
    def returned_by(self, value: typing.Optional[uuid.UUID]) -> None: ...
    @measurements.setter
    def measurements(self, value: builtins.list[NewSpecimenMeasurement]) -> None: ...
    @additional_data.setter
    def additional_data(self, value: typing.Optional[typing]) -> None: ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def __new__(cls, *, id:uuid.UUID, readable_id:typing.Optional[builtins.str]=None, name:typing.Optional[builtins.str]=None, submitted_by:typing.Optional[uuid.UUID]=None, lab_id:typing.Optional[uuid.UUID]=None, received_at:typing.Optional[datetime.datetime]=None, species:typing.Optional[typing.Sequence[Species]]=None, tissue:typing.Optional[builtins.str]=None, committee_approvals:typing.Sequence[NewCommitteeApproval]=[], returned_at:typing.Optional[datetime.datetime]=None, returned_by:typing.Optional[uuid.UUID]=None, measurements:typing.Sequence[NewSpecimenMeasurement]=[], additional_data:typing.Optional[typing]=None) -> SpecimenUpdateCommon: ...
    def to_json_bytes(self) -> builtins.list[builtins.int]: ...
    def to_json_string(self) -> builtins.str: ...
    def to_base64_json(self) -> builtins.str: ...
    @staticmethod
    def from_json_bytes(json_bytes:typing.Sequence[builtins.int]) -> SpecimenUpdateCommon: ...
    @staticmethod
    def from_json_string(json_str:builtins.str) -> SpecimenUpdateCommon: ...
    @staticmethod
    def from_base64_json(base64_json_bytes:builtins.str) -> SpecimenUpdateCommon: ...

