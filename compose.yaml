services:
  postgres:
    image: postgres:18rc1-alpine
    restart: always
    user: root
    secrets:
      - db_root_user
      - db_root_password
      - db_name
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_root_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_root_password
      - POSTGRES_DB_FILE=/run/secrets/db_name
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    expose:
      - &db_port 5432
    healthcheck:
      test: pg_isready --dbname $(cat /run/secrets/db_name) || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
  scamplers-api:
    build:
      context: .
      dockerfile: rust/Dockerfile
      target: final
    environment:
      PORT: &api_port 8000
      DB_HOST: postgres
      DB_PORT: *db_port
    expose:
      - *api_port
    secrets:
      - source: db_root_user
        uid: "10001"
      - source: db_root_password
        uid: "10001"
      - source: db_login_user_password
        uid: "10001"
      - source: db_name
        uid: "10001"
      - source: initial_data
        uid: "10001"
      - source: ui_token
        uid: "10001"
    volumes:
      - logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # TODO: interpolate api_port
      test: curl http://localhost:8000/health || exit 1
      interval: 5s
      start_period: 10s
      start_interval: 1s
      timeout: 5s
      retries: 10
  scamplers-ui:
    build:
      context: typescript
      args:
        API_ADDRESS_SERVER: ${SCAMPLERS_UI_API_ADDRESS_SERVER}
        API_PATH: *api_path
        NODE_ENV: production
      target: final
    environment:
      IN_DOCKER: "true"
      PORT: &frontend_port 8000
    depends_on:
      scamplers-api:
        condition: service_healthy
    healthcheck:
      # TODO: interpolate frontend_port
      test: curl http://localhost:8000/health || exit 1
      interval: 5s
      start_period: 5s
      start_interval: 1s
      timeout: 1s
      retries: 5
    secrets:
      - source: auth_secret
        uid: "10001"
      - source: auth_microsoft_entra_id_id
        uid: "10001"
      - source: auth_microsoft_entra_id_secret
        uid: "10001"
      - source: auth_microsoft_entra_id_issuer
        uid: "10001"
      - source: frontend_token
        uid: "10001"
  caddy:
    image: caddy:2-alpine
    environment:
      PUBLIC_ADDRESS: ${SCAMPLERS_PUBLIC_ADDRESS}
      TLS_SETTINGS: ${SCAMPLERS_TLS_SETTINGS-""}
      FRONTEND_HOST: scamplers-frontend
      FRONTEND_PORT: *frontend_port
      API_HOST: scamplers-api
      API_PORT: *api_port
      API_PATH: *api_path
    restart: always
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - $PWD/caddy:/etc/caddy
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      scamplers-frontend:
        condition: service_healthy
    secrets:
      - tls_certificate
      - tls_key
volumes:
  db-data:
  logs:
  caddy-data:
  caddy-config:
secrets:
  db_root_user:
    environment: SCAMPLERS_DB_ROOT_USER
  db_root_password:
    environment: SCAMPLERS_DB_ROOT_PASSWORD
  db_login_user_password:
    environment: SCAMPLERS_DB_LOGIN_USER_PASSWORD
  db_name:
    environment: SCAMPLERS_DB_NAME
  auth_secret:
    environment: SCAMPLERS_AUTH_SECRET
  auth_microsoft_entra_id_id:
    environment: SCAMPLERS_AUTH_MICROSOFT_ENTRA_ID_ID
  auth_microsoft_entra_id_secret:
    environment: SCAMPLERS_AUTH_MICROSOFT_ENTRA_ID_SECRET
  auth_microsoft_entra_id_issuer:
    environment: SCAMPLERS_AUTH_MICROSOFT_ENTRA_ID_ISSUER
  frontend_token:
    environment: SCAMPLERS_FRONTEND_TOKEN
  seed_data:
    file: ${SCAMPLERS_SEED_DATA}
  tls_certificate:
    file: ${SCAMPLERS_TLS_CERTIFICATE_PATH}
  tls_key:
    file: ${SCAMPLERS_TLS_KEY_PATH}
